import { I18NextErrorHandlingStrategy } from './I18NextErrorHandlingStrategies';
import { I18NextLoadResult } from './I18NextLoadResult';
import { ITranslationEvents } from './ITranslationEvents';
import { ITranslationService } from './ITranslationService';
export declare class I18NextService implements ITranslationService {
    private errorHandlingStrategy;
    events: ITranslationEvents;
    language: string;
    languages: string[];
    readonly options: any;
    constructor(errorHandlingStrategy: I18NextErrorHandlingStrategy);
    use(plugin: any): this;
    init(options?: any): Promise<any>;
    t(key: string | string[], options?: any): string;
    format(value: any, format: string, lng: string): string;
    exists(key: any, options: any): any;
    getFixedT(lng: any, ns: any): any;
    setDefaultNamespace(ns: string): void;
    dir(lng?: string): any;
    changeLanguage(lng: string): Promise<I18NextLoadResult>;
    loadNamespaces(namespaces: string | string[]): Promise<any>;
    loadLanguages(lngs: string | string[], callback: Function): Promise<I18NextLoadResult>;
    reloadResources(...params: any[]): void;
    getResource(lng: any, ns: any, key: any, options: any): any;
    addResource(lng: any, ns: any, key: any, value: any, options: any): void;
    addResources(lng: any, ns: any, resources: any): void;
    addResourceBundle(lng: any, ns: any, resources: any, deep: any, overwrite: any): void;
    hasResourceBundle(lng: any, ns: any): any;
    getResourceBundle(lng: any, ns: any): any;
    removeResourceBundle(lng: any, ns: any): void;
    private subscribeEvents;
}
