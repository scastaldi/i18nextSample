/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Pipe } from '@angular/core';
import { I18NEXT_NAMESPACE, I18NEXT_SCOPE, I18NEXT_SERVICE } from './I18NEXT_TOKENS';
var I18NextPipe = /** @class */ (function () {
    function I18NextPipe(translateI18Next, ns, scope) {
        this.translateI18Next = translateI18Next;
        this.ns = ns;
        this.scope = scope;
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    I18NextPipe.prototype.transform = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        options = this.prepareOptions(options);
        /** @type {?} */
        var i18nOpts = this.translateI18Next.options;
        if (options.prependScope === undefined || options.prependScope === true) {
            if (this.scope) {
                key = this.prependScope(key, this.scope, i18nOpts.keySeparator, i18nOpts.nsSeparator);
            }
        }
        if (options.prependNamespace === undefined || options.prependNamespace === true) {
            if (this.ns) {
                key = this.prependNamespace(key, this.ns, i18nOpts.nsSeparator);
            }
        }
        /** @type {?} */
        var result = this.translateI18Next.t(key, options);
        if (options.format) {
            if (result) {
                result = this.translateI18Next
                    .format(result, options.format, this.translateI18Next.language);
            }
        }
        return result;
    };
    /**
     * @private
     * @param {?} key
     * @param {?} scope
     * @param {?} keySeparator
     * @param {?} nsSeparator
     * @return {?}
     */
    I18NextPipe.prototype.prependScope = /**
     * @private
     * @param {?} key
     * @param {?} scope
     * @param {?} keySeparator
     * @param {?} nsSeparator
     * @return {?}
     */
    function (key, scope, keySeparator, nsSeparator) {
        var _this = this;
        if (typeof (key) === 'string') {
            key = [key];
        }
        if (typeof (scope) === 'string') {
            scope = [scope];
        }
        /** @type {?} */
        var keysWithScope = [];
        var _loop_1 = function (i) {
            /** @type {?} */
            var k = key[i];
            if (!this_1.keyContainsNsSeparator(k, nsSeparator)) { // Do not set scope, if key contains a namespace
                keysWithScope.push.apply(// Do not set scope, if key contains a namespace
                keysWithScope, tslib_1.__spread(scope.map((/**
                 * @param {?} sc
                 * @return {?}
                 */
                function (sc) { return _this.joinStrings(keySeparator, sc, k); }))));
            }
            keysWithScope.push(k);
        };
        var this_1 = this;
        for (var i = 0; i < key.length; i++) {
            _loop_1(i);
        }
        return keysWithScope;
    };
    /**
     * @private
     * @param {?} key
     * @param {?} ns
     * @param {?} nsSeparator
     * @return {?}
     */
    I18NextPipe.prototype.prependNamespace = /**
     * @private
     * @param {?} key
     * @param {?} ns
     * @param {?} nsSeparator
     * @return {?}
     */
    function (key, ns, nsSeparator) {
        var _this = this;
        if (typeof (key) === 'string') {
            key = [key];
        }
        if (typeof (ns) === 'string') {
            ns = [ns];
        }
        /** @type {?} */
        var keysWithNamespace = [];
        var _loop_2 = function (i) {
            /** @type {?} */
            var k = key[i];
            if (!this_2.keyContainsNsSeparator(k, nsSeparator)) { // Do not set namespace, if key contains a namespace
                keysWithNamespace.push.apply(// Do not set namespace, if key contains a namespace
                keysWithNamespace, tslib_1.__spread(ns.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return _this.joinStrings(nsSeparator, n, k); }))));
            }
            keysWithNamespace.push(k);
        };
        var this_2 = this;
        for (var i = 0; i < key.length; i++) {
            _loop_2(i);
        }
        return keysWithNamespace;
    };
    /**
     * @private
     * @param {?} separator
     * @param {...?} str
     * @return {?}
     */
    I18NextPipe.prototype.joinStrings = /**
     * @private
     * @param {?} separator
     * @param {...?} str
     * @return {?}
     */
    function (separator) {
        var str = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            str[_i - 1] = arguments[_i];
        }
        return tslib_1.__spread(str).join(separator);
    };
    /**
     * @private
     * @param {?} key
     * @param {?} nsSeparator
     * @return {?}
     */
    I18NextPipe.prototype.keyContainsNsSeparator = /**
     * @private
     * @param {?} key
     * @param {?} nsSeparator
     * @return {?}
     */
    function (key, nsSeparator) {
        return key.indexOf(nsSeparator) !== -1;
    };
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    I18NextPipe.prototype.prepareOptions = /**
     * @private
     * @param {?} options
     * @return {?}
     */
    function (options) {
        options = options || {};
        if (options.context != null)
            options.context = options.context.toString();
        return options;
    };
    I18NextPipe.decorators = [
        { type: Injectable },
        { type: Pipe, args: [{
                    name: 'i18next'
                },] }
    ];
    /** @nocollapse */
    I18NextPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_SERVICE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_NAMESPACE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_SCOPE,] }] }
    ]; };
    return I18NextPipe;
}());
export { I18NextPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    I18NextPipe.prototype.translateI18Next;
    /**
     * @type {?}
     * @private
     */
    I18NextPipe.prototype.ns;
    /**
     * @type {?}
     * @private
     */
    I18NextPipe.prototype.scope;
}
//# sourceMappingURL=data:application/json;base64,