/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Pipe } from '@angular/core';
import { I18NEXT_NAMESPACE, I18NEXT_SCOPE, I18NEXT_SERVICE } from './I18NEXT_TOKENS';
import { I18NextPipe } from './I18NextPipe';
var I18NextCapPipe = /** @class */ (function (_super) {
    tslib_1.__extends(I18NextCapPipe, _super);
    function I18NextCapPipe(translateI18Next, ns, scope) {
        return _super.call(this, translateI18Next, ns, scope) || this;
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    I18NextCapPipe.prototype.transform = /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    function (key, options) {
        options = options || {};
        options.format = 'cap';
        return _super.prototype.transform.call(this, key, options);
    };
    I18NextCapPipe.decorators = [
        { type: Injectable },
        { type: Pipe, args: [{
                    name: 'i18nextCap'
                },] }
    ];
    /** @nocollapse */
    I18NextCapPipe.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_SERVICE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_NAMESPACE,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_SCOPE,] }] }
    ]; };
    return I18NextCapPipe;
}(I18NextPipe));
export { I18NextCapPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSTE4TmV4dENhcFBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWkxOG5leHQvIiwic291cmNlcyI6WyJJMThOZXh0Q2FwUGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNyRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDO0lBSW9DLDBDQUFXO0lBQzdDLHdCQUMyQixnQkFBcUMsRUFDbkMsRUFBcUIsRUFDekIsS0FBd0I7ZUFFL0Msa0JBQU0sZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQztJQUNwQyxDQUFDOzs7Ozs7SUFFTSxrQ0FBUzs7Ozs7SUFBaEIsVUFBaUIsR0FBc0IsRUFBRSxPQUFhO1FBQ3BELE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLE9BQU8saUJBQU0sU0FBUyxZQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDOztnQkFqQkYsVUFBVTtnQkFDVixJQUFJLFNBQUM7b0JBQ0YsSUFBSSxFQUFFLFlBQVk7aUJBQ3JCOzs7O2dEQUdJLE1BQU0sU0FBQyxlQUFlO2dEQUN0QixNQUFNLFNBQUMsaUJBQWlCO2dEQUN4QixNQUFNLFNBQUMsYUFBYTs7SUFVekIscUJBQUM7Q0FBQSxBQWxCRCxDQUlvQyxXQUFXLEdBYzlDO1NBZFksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgSTE4TkVYVF9OQU1FU1BBQ0UsIEkxOE5FWFRfU0NPUEUsIEkxOE5FWFRfU0VSVklDRSB9IGZyb20gJy4vSTE4TkVYVF9UT0tFTlMnO1xyXG5pbXBvcnQgeyBJMThOZXh0UGlwZSB9IGZyb20gJy4vSTE4TmV4dFBpcGUnO1xyXG5pbXBvcnQgeyBJVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9JVHJhbnNsYXRpb25TZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2kxOG5leHRDYXAnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJMThOZXh0Q2FwUGlwZSBleHRlbmRzIEkxOE5leHRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0KEkxOE5FWFRfU0VSVklDRSkgdHJhbnNsYXRlSTE4TmV4dDogSVRyYW5zbGF0aW9uU2VydmljZSxcclxuICAgIEBJbmplY3QoSTE4TkVYVF9OQU1FU1BBQ0UpIG5zOiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICAgIEBJbmplY3QoSTE4TkVYVF9TQ09QRSkgc2NvcGU6IHN0cmluZyB8IHN0cmluZ1tdXHJcbiAgKSB7XHJcbiAgICBzdXBlcih0cmFuc2xhdGVJMThOZXh0LCBucywgc2NvcGUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRyYW5zZm9ybShrZXk6IHN0cmluZyB8IHN0cmluZ1tdLCBvcHRpb25zPzogYW55KTogc3RyaW5nIHtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgb3B0aW9ucy5mb3JtYXQgPSAnY2FwJztcclxuICAgIHJldHVybiBzdXBlci50cmFuc2Zvcm0oa2V5LCBvcHRpb25zKTtcclxuICB9XHJcbn1cclxuIl19