/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { I18NEXT_ERROR_HANDLING_STRATEGY, I18NEXT_NAMESPACE, I18NEXT_SCOPE, I18NEXT_SERVICE, I18NEXT_NAMESPACE_RESOLVER } from './I18NEXT_TOKENS';
import { I18NextCapPipe } from './I18NextCapPipe';
import { NativeErrorHandlingStrategy } from './I18NextErrorHandlingStrategies';
import { I18NextFormatPipe } from './I18NextFormatPipe';
import { I18NextPipe } from './I18NextPipe';
import { I18NextService } from './I18NextService';
import { I18NextTitle } from './I18NextTitle';
export { I18NEXT_SCOPE, I18NEXT_NAMESPACE, I18NEXT_SERVICE, I18NEXT_NAMESPACE_RESOLVER, I18NEXT_ERROR_HANDLING_STRATEGY } from './I18NEXT_TOKENS';
export { I18NextPipe } from './I18NextPipe';
export { I18NextCapPipe } from './I18NextCapPipe';
export { I18NextFormatPipe } from './I18NextFormatPipe';
export { I18NextService } from './I18NextService';
export { I18NextTitle } from './I18NextTitle';
export { NativeErrorHandlingStrategy, StrictErrorHandlingStrategy } from './I18NextErrorHandlingStrategies';
export {} from './I18NextModuleParams';
export {} from './I18NextLoadResult';
export {} from './ITranslationService';
export {} from './ITranslationEvents';
/**
 * @param {?} activatedRouteSnapshot
 * @param {?} routerStateSnapshot
 * @return {?}
 */
export function resolver(activatedRouteSnapshot, routerStateSnapshot) {
    /** @type {?} */
    var namespaces = [];
    namespaces = activatedRouteSnapshot.data && activatedRouteSnapshot.data.i18nextNamespaces || namespaces;
    return this.loadNamespaces(namespaces.filter((/**
     * @param {?} n
     * @return {?}
     */
    function (n) { return n; })));
}
/**
 * @param {?} i18next
 * @return {?}
 */
export function i18nextNamespaceResolverFactory(i18next) {
    return resolver.bind(i18next);
}
var I18NextModule = /** @class */ (function () {
    function I18NextModule() {
    }
    /**
     * @param {?=} params
     * @return {?}
     */
    I18NextModule.forRoot = /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (params === void 0) { params = {}; }
        return {
            ngModule: I18NextModule,
            providers: [
                {
                    provide: I18NEXT_SERVICE,
                    useClass: I18NextService
                },
                {
                    provide: I18NEXT_ERROR_HANDLING_STRATEGY,
                    useClass: params.errorHandlingStrategy || NativeErrorHandlingStrategy
                },
                I18NextService,
                I18NextPipe,
                I18NextCapPipe,
                I18NextFormatPipe,
                I18NextTitle,
                {
                    provide: I18NEXT_NAMESPACE_RESOLVER,
                    useFactory: i18nextNamespaceResolverFactory,
                    deps: [I18NEXT_SERVICE]
                }
            ]
        };
    };
    /**
     * @param {?=} customFormat
     * @return {?}
     */
    I18NextModule.interpolationFormat = /**
     * @param {?=} customFormat
     * @return {?}
     */
    function (customFormat) {
        if (customFormat === void 0) { customFormat = null; }
        /**
         * @param {?} value
         * @param {?} format
         * @param {?} lng
         * @return {?}
         */
        function formatDelegate(value, format, lng) {
            /** @type {?} */
            var formatedValue = defaultInterpolationFormat(value, format, lng);
            if (customFormat === null)
                return formatedValue;
            return customFormat(formatedValue, format, lng);
        }
        return formatDelegate;
    };
    I18NextModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        {
                            provide: I18NEXT_NAMESPACE,
                            useValue: ''
                        },
                        {
                            provide: I18NEXT_SCOPE,
                            useValue: ''
                        },
                        I18NextPipe,
                        I18NextCapPipe,
                        I18NextFormatPipe,
                        I18NextTitle
                    ],
                    declarations: [
                        I18NextPipe,
                        I18NextCapPipe,
                        I18NextFormatPipe
                    ],
                    exports: [
                        I18NextPipe,
                        I18NextCapPipe,
                        I18NextFormatPipe
                    ]
                },] }
    ];
    return I18NextModule;
}());
export { I18NextModule };
/**
 * @param {?} value
 * @param {?} format
 * @param {?=} lng
 * @return {?}
 */
export function defaultInterpolationFormat(value, format, lng) {
    if (lng === void 0) { lng = undefined; }
    if (!value)
        return value;
    switch (format) {
        case 'upper':
        case 'uppercase':
            return value.toUpperCase();
        case 'lower':
        case 'lowercase':
            return value.toLowerCase();
        case 'cap':
        case 'capitalize':
            return value.charAt(0).toUpperCase() + value.slice(1);
        case null:
        case undefined:
        case 'none':
        default:
            return value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWkxOG5leHQvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQW1CLE1BQU0sZUFBZSxDQUFDO0FBRy9FLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsZUFBZSxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEosT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXhELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc5QywrSEFBYyxrQkFBa0IsQ0FBQztBQUNqQyw0QkFBYyxlQUFlLENBQUM7QUFDOUIsK0JBQWMsa0JBQWtCLENBQUM7QUFDakMsa0NBQWMscUJBQXFCLENBQUM7QUFDcEMsK0JBQWMsa0JBQWtCLENBQUM7QUFDakMsNkJBQWMsZ0JBQWdCLENBQUM7QUFDL0IseUVBQWMsa0NBQWtDLENBQUM7QUFDakQsZUFBYyx1QkFBdUIsQ0FBQztBQUN0QyxlQUFjLHFCQUFxQixDQUFDO0FBRXBDLGVBQWMsdUJBQXVCLENBQUM7QUFDdEMsZUFBYyxzQkFBc0IsQ0FBQzs7Ozs7O0FBR3JDLE1BQU0sVUFBVSxRQUFRLENBQUMsc0JBQXNCLEVBQUUsbUJBQW1COztRQUM5RCxVQUFVLEdBQWEsRUFBRTtJQUM3QixVQUFVLEdBQUcsc0JBQXNCLENBQUMsSUFBSSxJQUFJLHNCQUFzQixDQUFDLElBQUksQ0FBQyxp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QVMsQ0FBQztRQUNmLEtBQUssTUFBTSxDQUFDO1FBQ1o7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgRmFjdG9yeVByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRpdGxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcblxyXG5pbXBvcnQgeyBJMThORVhUX0VSUk9SX0hBTkRMSU5HX1NUUkFURUdZLCBJMThORVhUX05BTUVTUEFDRSwgSTE4TkVYVF9TQ09QRSwgSTE4TkVYVF9TRVJWSUNFLCBJMThORVhUX05BTUVTUEFDRV9SRVNPTFZFUiB9IGZyb20gJy4vSTE4TkVYVF9UT0tFTlMnO1xyXG5pbXBvcnQgeyBJMThOZXh0Q2FwUGlwZSB9IGZyb20gJy4vSTE4TmV4dENhcFBpcGUnO1xyXG5pbXBvcnQgeyBOYXRpdmVFcnJvckhhbmRsaW5nU3RyYXRlZ3kgfSBmcm9tICcuL0kxOE5leHRFcnJvckhhbmRsaW5nU3RyYXRlZ2llcyc7XHJcbmltcG9ydCB7IEkxOE5leHRGb3JtYXRQaXBlIH0gZnJvbSAnLi9JMThOZXh0Rm9ybWF0UGlwZSc7XHJcbmltcG9ydCB7IEkxOE5leHRNb2R1bGVQYXJhbXMgfSBmcm9tICcuL0kxOE5leHRNb2R1bGVQYXJhbXMnO1xyXG5pbXBvcnQgeyBJMThOZXh0UGlwZSB9IGZyb20gJy4vSTE4TmV4dFBpcGUnO1xyXG5pbXBvcnQgeyBJMThOZXh0U2VydmljZSB9IGZyb20gJy4vSTE4TmV4dFNlcnZpY2UnO1xyXG5pbXBvcnQgeyBJMThOZXh0VGl0bGUgfSBmcm9tICcuL0kxOE5leHRUaXRsZSc7XHJcbmltcG9ydCB7IElUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuL0lUcmFuc2xhdGlvblNlcnZpY2UnO1xyXG5cclxuZXhwb3J0ICogZnJvbSAnLi9JMThORVhUX1RPS0VOUyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vSTE4TmV4dFBpcGUnO1xyXG5leHBvcnQgKiBmcm9tICcuL0kxOE5leHRDYXBQaXBlJztcclxuZXhwb3J0ICogZnJvbSAnLi9JMThOZXh0Rm9ybWF0UGlwZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vSTE4TmV4dFNlcnZpY2UnO1xyXG5leHBvcnQgKiBmcm9tICcuL0kxOE5leHRUaXRsZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vSTE4TmV4dEVycm9ySGFuZGxpbmdTdHJhdGVnaWVzJztcclxuZXhwb3J0ICogZnJvbSAnLi9JMThOZXh0TW9kdWxlUGFyYW1zJztcclxuZXhwb3J0ICogZnJvbSAnLi9JMThOZXh0TG9hZFJlc3VsdCc7XHJcblxyXG5leHBvcnQgKiBmcm9tICcuL0lUcmFuc2xhdGlvblNlcnZpY2UnO1xyXG5leHBvcnQgKiBmcm9tICcuL0lUcmFuc2xhdGlvbkV2ZW50cyc7XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVyKGFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHJvdXRlclN0YXRlU25hcHNob3QpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBsZXQgbmFtZXNwYWNlczogc3RyaW5nW10gPSBbXTtcclxuICBuYW1lc3BhY2VzID0gYWN0aXZhdGVkUm91dGVTbmFwc2hvdC5kYXRhICYmIGFjdGl2YXRlZFJvdXRlU25hcHNob3QuZGF0YS5pMThuZXh0TmFtZXNwYWNlcyB8fCBuYW1lc3BhY2VzO1xyXG4gIHJldHVybiB0aGlzLmxvYWROYW1lc3BhY2VzKG5hbWVzcGFjZXMuZmlsdGVyKG4gPT4gbikpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpMThuZXh0TmFtZXNwYWNlUmVzb2x2ZXJGYWN0b3J5KGkxOG5leHQ6IElUcmFuc2xhdGlvblNlcnZpY2UpIHtcclxuICByZXR1cm4gcmVzb2x2ZXIuYmluZChpMThuZXh0KTtcclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogSTE4TkVYVF9OQU1FU1BBQ0UsXHJcbiAgICAgIHVzZVZhbHVlOiAnJ1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgcHJvdmlkZTogSTE4TkVYVF9TQ09QRSxcclxuICAgICAgdXNlVmFsdWU6ICcnXHJcbiAgICB9LFxyXG4gICAgSTE4TmV4dFBpcGUsXHJcbiAgICBJMThOZXh0Q2FwUGlwZSxcclxuICAgIEkxOE5leHRGb3JtYXRQaXBlLFxyXG4gICAgSTE4TmV4dFRpdGxlXHJcbiAgXSxcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIEkxOE5leHRQaXBlLFxyXG4gICAgSTE4TmV4dENhcFBpcGUsXHJcbiAgICBJMThOZXh0Rm9ybWF0UGlwZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgSTE4TmV4dFBpcGUsXHJcbiAgICBJMThOZXh0Q2FwUGlwZSxcclxuICAgIEkxOE5leHRGb3JtYXRQaXBlXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgSTE4TmV4dE1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QocGFyYW1zOiBJMThOZXh0TW9kdWxlUGFyYW1zID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBJMThOZXh0TW9kdWxlLFxyXG4gICAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBJMThORVhUX1NFUlZJQ0UsXHJcbiAgICAgICAgICB1c2VDbGFzczogSTE4TmV4dFNlcnZpY2VcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3ZpZGU6IEkxOE5FWFRfRVJST1JfSEFORExJTkdfU1RSQVRFR1ksXHJcbiAgICAgICAgICB1c2VDbGFzczogcGFyYW1zLmVycm9ySGFuZGxpbmdTdHJhdGVneSB8fCBOYXRpdmVFcnJvckhhbmRsaW5nU3RyYXRlZ3lcclxuICAgICAgICB9LFxyXG4gICAgICAgIEkxOE5leHRTZXJ2aWNlLFxyXG4gICAgICAgIEkxOE5leHRQaXBlLFxyXG4gICAgICAgIEkxOE5leHRDYXBQaXBlLFxyXG4gICAgICAgIEkxOE5leHRGb3JtYXRQaXBlLFxyXG4gICAgICAgIEkxOE5leHRUaXRsZSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwcm92aWRlOiBJMThORVhUX05BTUVTUEFDRV9SRVNPTFZFUixcclxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGkxOG5leHROYW1lc3BhY2VSZXNvbHZlckZhY3RvcnksXHJcbiAgICAgICAgICBkZXBzOiBbSTE4TkVYVF9TRVJWSUNFXVxyXG4gICAgICAgIH1cclxuICAgICAgXVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpbnRlcnBvbGF0aW9uRm9ybWF0KGN1c3RvbUZvcm1hdDogRnVuY3Rpb24gPSBudWxsKTogRnVuY3Rpb24ge1xyXG4gICAgZnVuY3Rpb24gZm9ybWF0RGVsZWdhdGUodmFsdWU6IGFueSwgZm9ybWF0OiBzdHJpbmcsIGxuZzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgbGV0IGZvcm1hdGVkVmFsdWU6IHN0cmluZyA9IGRlZmF1bHRJbnRlcnBvbGF0aW9uRm9ybWF0KHZhbHVlLCBmb3JtYXQsIGxuZyk7XHJcbiAgICAgIGlmIChjdXN0b21Gb3JtYXQgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIGZvcm1hdGVkVmFsdWU7XHJcbiAgICAgIHJldHVybiBjdXN0b21Gb3JtYXQoZm9ybWF0ZWRWYWx1ZSwgZm9ybWF0LCBsbmcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZvcm1hdERlbGVnYXRlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRJbnRlcnBvbGF0aW9uRm9ybWF0KHZhbHVlOiBhbnksIGZvcm1hdDogc3RyaW5nLCBsbmc6IHN0cmluZyA9IHVuZGVmaW5lZCk6IHN0cmluZyB7XHJcbiAgaWYgKCF2YWx1ZSlcclxuICAgIHJldHVybiB2YWx1ZTtcclxuICBzd2l0Y2ggKGZvcm1hdCkge1xyXG4gICAgY2FzZSAndXBwZXInOlxyXG4gICAgY2FzZSAndXBwZXJjYXNlJzpcclxuICAgICAgcmV0dXJuIHZhbHVlLnRvVXBwZXJDYXNlKCk7XHJcbiAgICBjYXNlICdsb3dlcic6XHJcbiAgICBjYXNlICdsb3dlcmNhc2UnOlxyXG4gICAgICByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgIGNhc2UgJ2NhcCc6XHJcbiAgICBjYXNlICdjYXBpdGFsaXplJzpcclxuICAgICAgcmV0dXJuIHZhbHVlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsdWUuc2xpY2UoMSk7XHJcbiAgICBjYXNlIG51bGw6XHJcbiAgICBjYXNlIHVuZGVmaW5lZDpcclxuICAgIGNhc2UgJ25vbmUnOlxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxufVxyXG4iXX0=