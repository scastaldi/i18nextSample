/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Pipe } from '@angular/core';
import { I18NEXT_NAMESPACE, I18NEXT_SCOPE, I18NEXT_SERVICE } from './I18NEXT_TOKENS';
export class I18NextPipe {
    /**
     * @param {?} translateI18Next
     * @param {?} ns
     * @param {?} scope
     */
    constructor(translateI18Next, ns, scope) {
        this.translateI18Next = translateI18Next;
        this.ns = ns;
        this.scope = scope;
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    transform(key, options) {
        options = this.prepareOptions(options);
        /** @type {?} */
        let i18nOpts = this.translateI18Next.options;
        if (options.prependScope === undefined || options.prependScope === true) {
            if (this.scope) {
                key = this.prependScope(key, this.scope, i18nOpts.keySeparator, i18nOpts.nsSeparator);
            }
        }
        if (options.prependNamespace === undefined || options.prependNamespace === true) {
            if (this.ns) {
                key = this.prependNamespace(key, this.ns, i18nOpts.nsSeparator);
            }
        }
        /** @type {?} */
        let result = this.translateI18Next.t(key, options);
        if (options.format) {
            if (result) {
                result = this.translateI18Next
                    .format(result, options.format, this.translateI18Next.language);
            }
        }
        return result;
    }
    /**
     * @private
     * @param {?} key
     * @param {?} scope
     * @param {?} keySeparator
     * @param {?} nsSeparator
     * @return {?}
     */
    prependScope(key, scope, keySeparator, nsSeparator) {
        if (typeof (key) === 'string') {
            key = [key];
        }
        if (typeof (scope) === 'string') {
            scope = [scope];
        }
        /** @type {?} */
        let keysWithScope = [];
        for (let i = 0; i < key.length; i++) {
            /** @type {?} */
            const k = key[i];
            if (!this.keyContainsNsSeparator(k, nsSeparator)) { // Do not set scope, if key contains a namespace
                keysWithScope.push(...scope.map((/**
                 * @param {?} sc
                 * @return {?}
                 */
                sc => this.joinStrings(keySeparator, sc, k))));
            }
            keysWithScope.push(k);
        }
        return keysWithScope;
    }
    /**
     * @private
     * @param {?} key
     * @param {?} ns
     * @param {?} nsSeparator
     * @return {?}
     */
    prependNamespace(key, ns, nsSeparator) {
        if (typeof (key) === 'string') {
            key = [key];
        }
        if (typeof (ns) === 'string') {
            ns = [ns];
        }
        /** @type {?} */
        let keysWithNamespace = [];
        for (let i = 0; i < key.length; i++) {
            /** @type {?} */
            const k = key[i];
            if (!this.keyContainsNsSeparator(k, nsSeparator)) { // Do not set namespace, if key contains a namespace
                keysWithNamespace.push(...ns.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => this.joinStrings(nsSeparator, n, k))));
            }
            keysWithNamespace.push(k);
        }
        return keysWithNamespace;
    }
    /**
     * @private
     * @param {?} separator
     * @param {...?} str
     * @return {?}
     */
    joinStrings(separator, ...str) {
        return [...str].join(separator);
    }
    /**
     * @private
     * @param {?} key
     * @param {?} nsSeparator
     * @return {?}
     */
    keyContainsNsSeparator(key, nsSeparator) {
        return key.indexOf(nsSeparator) !== -1;
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    prepareOptions(options) {
        options = options || {};
        if (options.context != null)
            options.context = options.context.toString();
        return options;
    }
}
I18NextPipe.decorators = [
    { type: Injectable },
    { type: Pipe, args: [{
                name: 'i18next'
            },] }
];
/** @nocollapse */
I18NextPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_SERVICE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_NAMESPACE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_SCOPE,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    I18NextPipe.prototype.translateI18Next;
    /**
     * @type {?}
     * @private
     */
    I18NextPipe.prototype.ns;
    /**
     * @type {?}
     * @private
     */
    I18NextPipe.prototype.scope;
}
//# sourceMappingURL=data:application/json;base64,