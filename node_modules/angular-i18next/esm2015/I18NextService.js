/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import * as i18n from 'i18next';
import { I18NEXT_ERROR_HANDLING_STRATEGY } from './I18NEXT_TOKENS';
import { I18NextEvents } from './I18NextEvents';
/** @type {?} */
const i18next = i18n.default;
export class I18NextService {
    /**
     * @param {?} errorHandlingStrategy
     */
    constructor(errorHandlingStrategy) {
        this.errorHandlingStrategy = errorHandlingStrategy;
        this.events = new I18NextEvents();
        this.language = '';
        this.languages = [];
    }
    /**
     * @return {?}
     */
    get options() {
        return i18next.options;
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} plugin
     * @return {THIS}
     */
    use(plugin) {
        i18next.use.call(i18next, plugin);
        return (/** @type {?} */ (this));
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    init(options) {
        options = options || {};
        this.subscribeEvents();
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            i18next.init.call(i18next, Object.assign({}, options), this.errorHandlingStrategy.handle(resolve, reject));
        }));
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    t(key, options) {
        options = options || {};
        return i18next.t.call(i18next, (/** @type {?} */ (key)), options);
    }
    /**
     * @param {?} value
     * @param {?} format
     * @param {?} lng
     * @return {?}
     */
    format(value, format, lng) {
        return i18next.format.call(i18next, value, format, lng);
    }
    /**
     * @param {?} key
     * @param {?} options
     * @return {?}
     */
    exists(key, options) {
        return i18next.exists.call(i18next, key, options);
    }
    /**
     * @param {?} lng
     * @param {?} ns
     * @return {?}
     */
    getFixedT(lng, ns) {
        return i18next.getFixedT.call(i18next, lng, ns);
    }
    /**
     * @param {?} ns
     * @return {?}
     */
    setDefaultNamespace(ns) {
        i18next.setDefaultNamespace.call(i18next, ns);
    }
    /**
     * @param {?=} lng
     * @return {?}
     */
    dir(lng = undefined) {
        return i18next.dir.call(i18next, lng);
    }
    /**
     * @param {?} lng
     * @return {?}
     */
    changeLanguage(lng) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            i18next.changeLanguage.call(i18next, lng, this.errorHandlingStrategy.handle(resolve, reject));
        }));
    }
    /**
     * @param {?} namespaces
     * @return {?}
     */
    loadNamespaces(namespaces) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            i18next.loadNamespaces.call(i18next, namespaces, this.errorHandlingStrategy.handle(resolve, reject));
        }));
    }
    /**
     * @param {?} lngs
     * @param {?} callback
     * @return {?}
     */
    loadLanguages(lngs, callback) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            i18next.loadNamespaces.call(i18next, lngs, this.errorHandlingStrategy.handle(resolve, reject));
        }));
    }
    //#region resource handling
    /**
     * @param {...?} params
     * @return {?}
     */
    reloadResources(...params) {
        i18next.reloadResources.apply(i18next, params);
    }
    /**
     * @param {?} lng
     * @param {?} ns
     * @param {?} key
     * @param {?} options
     * @return {?}
     */
    getResource(lng, ns, key, options) {
        return i18next.getResource.call(i18next, lng, ns, key, options);
    }
    /**
     * @param {?} lng
     * @param {?} ns
     * @param {?} key
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    addResource(lng, ns, key, value, options) {
        i18next.addResource.call(i18next, lng, ns, key, value, options);
    }
    /**
     * @param {?} lng
     * @param {?} ns
     * @param {?} resources
     * @return {?}
     */
    addResources(lng, ns, resources) {
        i18next.addResources.call(i18next, lng, ns, resources);
    }
    /**
     * @param {?} lng
     * @param {?} ns
     * @param {?} resources
     * @param {?} deep
     * @param {?} overwrite
     * @return {?}
     */
    addResourceBundle(lng, ns, resources, deep, overwrite) {
        i18next.addResourceBundle.call(i18next, lng, ns, resources, deep, overwrite);
    }
    /**
     * @param {?} lng
     * @param {?} ns
     * @return {?}
     */
    hasResourceBundle(lng, ns) {
        return i18next.hasResourceBundle.call(i18next, lng, ns);
    }
    /**
     * @param {?} lng
     * @param {?} ns
     * @return {?}
     */
    getResourceBundle(lng, ns) {
        return i18next.getResourceBundle.call(i18next, lng, ns);
    }
    /**
     * @param {?} lng
     * @param {?} ns
     * @return {?}
     */
    removeResourceBundle(lng, ns) {
        i18next.removeResourceBundle.call(i18next, lng, ns);
    }
    //#endregion
    /**
     * @private
     * @return {?}
     */
    subscribeEvents() {
        i18next.on.call(i18next, 'initialized', (/**
         * @param {?} options
         * @return {?}
         */
        options => {
            this.language = i18next.language;
            this.languages = i18next.languages;
            this.events.initialized.next(options);
        }));
        i18next.on.call(i18next, 'loaded', (/**
         * @param {?} loaded
         * @return {?}
         */
        loaded => this.events.loaded.next(loaded)));
        i18next.on.call(i18next, 'failedLoading', (/**
         * @param {?} lng
         * @param {?} ns
         * @param {?} msg
         * @return {?}
         */
        (lng, ns, msg) => this.events.failedLoading.next({ lng, ns, msg })));
        i18next.on.call(i18next, 'languageChanged', (/**
         * @param {?} lng
         * @return {?}
         */
        lng => {
            this.language = i18next.language;
            this.languages = i18next.languages;
            this.events.languageChanged.next(lng);
        }));
        i18next.on.call(i18next, 'missingKey', (/**
         * @param {?} lngs
         * @param {?} namespace
         * @param {?} key
         * @param {?} res
         * @return {?}
         */
        (lngs, namespace, key, res) => this.events.missingKey.next({ lngs, namespace, key, res })));
        i18next.on.call(i18next, 'added', (/**
         * @param {?} lng
         * @param {?} ns
         * @return {?}
         */
        (lng, ns) => this.events.added.next({ lng, ns })));
        i18next.on.call(i18next, 'removed', (/**
         * @param {?} lng
         * @param {?} ns
         * @return {?}
         */
        (lng, ns) => this.events.removed.next({ lng, ns })));
    }
}
I18NextService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
I18NextService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_ERROR_HANDLING_STRATEGY,] }] }
];
if (false) {
    /** @type {?} */
    I18NextService.prototype.events;
    /** @type {?} */
    I18NextService.prototype.language;
    /** @type {?} */
    I18NextService.prototype.languages;
    /**
     * @type {?}
     * @private
     */
    I18NextService.prototype.errorHandlingStrategy;
}
//# sourceMappingURL=data:application/json;base64,