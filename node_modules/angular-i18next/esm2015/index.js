/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { I18NEXT_ERROR_HANDLING_STRATEGY, I18NEXT_NAMESPACE, I18NEXT_SCOPE, I18NEXT_SERVICE, I18NEXT_NAMESPACE_RESOLVER } from './I18NEXT_TOKENS';
import { I18NextCapPipe } from './I18NextCapPipe';
import { NativeErrorHandlingStrategy } from './I18NextErrorHandlingStrategies';
import { I18NextFormatPipe } from './I18NextFormatPipe';
import { I18NextPipe } from './I18NextPipe';
import { I18NextService } from './I18NextService';
import { I18NextTitle } from './I18NextTitle';
export { I18NEXT_SCOPE, I18NEXT_NAMESPACE, I18NEXT_SERVICE, I18NEXT_NAMESPACE_RESOLVER, I18NEXT_ERROR_HANDLING_STRATEGY } from './I18NEXT_TOKENS';
export { I18NextPipe } from './I18NextPipe';
export { I18NextCapPipe } from './I18NextCapPipe';
export { I18NextFormatPipe } from './I18NextFormatPipe';
export { I18NextService } from './I18NextService';
export { I18NextTitle } from './I18NextTitle';
export { NativeErrorHandlingStrategy, StrictErrorHandlingStrategy } from './I18NextErrorHandlingStrategies';
export {} from './I18NextModuleParams';
export {} from './I18NextLoadResult';
export {} from './ITranslationService';
export {} from './ITranslationEvents';
/**
 * @param {?} activatedRouteSnapshot
 * @param {?} routerStateSnapshot
 * @return {?}
 */
export function resolver(activatedRouteSnapshot, routerStateSnapshot) {
    /** @type {?} */
    let namespaces = [];
    namespaces = activatedRouteSnapshot.data && activatedRouteSnapshot.data.i18nextNamespaces || namespaces;
    return this.loadNamespaces(namespaces.filter((/**
     * @param {?} n
     * @return {?}
     */
    n => n)));
}
/**
 * @param {?} i18next
 * @return {?}
 */
export function i18nextNamespaceResolverFactory(i18next) {
    return resolver.bind(i18next);
}
export class I18NextModule {
    /**
     * @param {?=} params
     * @return {?}
     */
    static forRoot(params = {}) {
        return {
            ngModule: I18NextModule,
            providers: [
                {
                    provide: I18NEXT_SERVICE,
                    useClass: I18NextService
                },
                {
                    provide: I18NEXT_ERROR_HANDLING_STRATEGY,
                    useClass: params.errorHandlingStrategy || NativeErrorHandlingStrategy
                },
                I18NextService,
                I18NextPipe,
                I18NextCapPipe,
                I18NextFormatPipe,
                I18NextTitle,
                {
                    provide: I18NEXT_NAMESPACE_RESOLVER,
                    useFactory: i18nextNamespaceResolverFactory,
                    deps: [I18NEXT_SERVICE]
                }
            ]
        };
    }
    /**
     * @param {?=} customFormat
     * @return {?}
     */
    static interpolationFormat(customFormat = null) {
        /**
         * @param {?} value
         * @param {?} format
         * @param {?} lng
         * @return {?}
         */
        function formatDelegate(value, format, lng) {
            /** @type {?} */
            let formatedValue = defaultInterpolationFormat(value, format, lng);
            if (customFormat === null)
                return formatedValue;
            return customFormat(formatedValue, format, lng);
        }
        return formatDelegate;
    }
}
I18NextModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    {
                        provide: I18NEXT_NAMESPACE,
                        useValue: ''
                    },
                    {
                        provide: I18NEXT_SCOPE,
                        useValue: ''
                    },
                    I18NextPipe,
                    I18NextCapPipe,
                    I18NextFormatPipe,
                    I18NextTitle
                ],
                declarations: [
                    I18NextPipe,
                    I18NextCapPipe,
                    I18NextFormatPipe
                ],
                exports: [
                    I18NextPipe,
                    I18NextCapPipe,
                    I18NextFormatPipe
                ]
            },] }
];
/**
 * @param {?} value
 * @param {?} format
 * @param {?=} lng
 * @return {?}
 */
export function defaultInterpolationFormat(value, format, lng = undefined) {
    if (!value)
        return value;
    switch (format) {
        case 'upper':
        case 'uppercase':
            return value.toUpperCase();
        case 'lower':
        case 'lowercase':
            return value.toLowerCase();
        case 'cap':
        case 'capitalize':
            return value.charAt(0).toUpperCase() + value.slice(1);
        case null:
        case undefined:
        case 'none':
        default:
            return value;
    }
}
//# sourceMappingURL=data:application/json;base64,