/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Pipe } from '@angular/core';
import { I18NEXT_NAMESPACE, I18NEXT_SCOPE, I18NEXT_SERVICE } from './I18NEXT_TOKENS';
import { I18NextPipe } from './I18NextPipe';
export class I18NextCapPipe extends I18NextPipe {
    /**
     * @param {?} translateI18Next
     * @param {?} ns
     * @param {?} scope
     */
    constructor(translateI18Next, ns, scope) {
        super(translateI18Next, ns, scope);
    }
    /**
     * @param {?} key
     * @param {?=} options
     * @return {?}
     */
    transform(key, options) {
        options = options || {};
        options.format = 'cap';
        return super.transform(key, options);
    }
}
I18NextCapPipe.decorators = [
    { type: Injectable },
    { type: Pipe, args: [{
                name: 'i18nextCap'
            },] }
];
/** @nocollapse */
I18NextCapPipe.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_SERVICE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_NAMESPACE,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [I18NEXT_SCOPE,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSTE4TmV4dENhcFBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWkxOG5leHQvIiwic291cmNlcyI6WyJJMThOZXh0Q2FwUGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUV4RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3JGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPNUMsTUFBTSxPQUFPLGNBQWUsU0FBUSxXQUFXOzs7Ozs7SUFDN0MsWUFDMkIsZ0JBQXFDLEVBQ25DLEVBQXFCLEVBQ3pCLEtBQXdCO1FBRS9DLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7O0lBRU0sU0FBUyxDQUFDLEdBQXNCLEVBQUUsT0FBYTtRQUNwRCxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixPQUFPLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUN2QixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7OztZQWpCRixVQUFVO1lBQ1YsSUFBSSxTQUFDO2dCQUNGLElBQUksRUFBRSxZQUFZO2FBQ3JCOzs7OzRDQUdJLE1BQU0sU0FBQyxlQUFlOzRDQUN0QixNQUFNLFNBQUMsaUJBQWlCOzRDQUN4QixNQUFNLFNBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgSTE4TkVYVF9OQU1FU1BBQ0UsIEkxOE5FWFRfU0NPUEUsIEkxOE5FWFRfU0VSVklDRSB9IGZyb20gJy4vSTE4TkVYVF9UT0tFTlMnO1xyXG5pbXBvcnQgeyBJMThOZXh0UGlwZSB9IGZyb20gJy4vSTE4TmV4dFBpcGUnO1xyXG5pbXBvcnQgeyBJVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9JVHJhbnNsYXRpb25TZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2kxOG5leHRDYXAnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJMThOZXh0Q2FwUGlwZSBleHRlbmRzIEkxOE5leHRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBASW5qZWN0KEkxOE5FWFRfU0VSVklDRSkgdHJhbnNsYXRlSTE4TmV4dDogSVRyYW5zbGF0aW9uU2VydmljZSxcclxuICAgIEBJbmplY3QoSTE4TkVYVF9OQU1FU1BBQ0UpIG5zOiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICAgIEBJbmplY3QoSTE4TkVYVF9TQ09QRSkgc2NvcGU6IHN0cmluZyB8IHN0cmluZ1tdXHJcbiAgKSB7XHJcbiAgICBzdXBlcih0cmFuc2xhdGVJMThOZXh0LCBucywgc2NvcGUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRyYW5zZm9ybShrZXk6IHN0cmluZyB8IHN0cmluZ1tdLCBvcHRpb25zPzogYW55KTogc3RyaW5nIHtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgb3B0aW9ucy5mb3JtYXQgPSAnY2FwJztcclxuICAgIHJldHVybiBzdXBlci50cmFuc2Zvcm0oa2V5LCBvcHRpb25zKTtcclxuICB9XHJcbn1cclxuIl19